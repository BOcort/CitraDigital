function varargout = Dekompersi(varargin)
% Dekompersi MATLAB code for Dekompersi.fig
%      Dekompersi, by itself, creates a new Dekompersi or raises the existing
%      singleton*.
%
%      H = Dekompersi returns the handle to a new Dekompersi or the handle to
%      the existing singleton*.
%
%      Dekompersi('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in Dekompersi.M with the given input arguments.
%
%      Dekompersi('Property','Value',...) creates a new Dekompersi or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Dekompersi_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Dekompersi_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help Dekompersi

% Last Modified by GUIDE v2.5 11-Apr-2025 17:37:56

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Dekompersi_OpeningFcn, ...
                   'gui_OutputFcn',  @Dekompersi_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Dekompersi is made visible.
function Dekompersi_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Dekompersi (see VARARGIN)

% Choose default command line output for Dekompersi
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Dekompersi wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = Dekompersi_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
open = guidata(gcbo);

% Pilih file teks untuk decoding
[filename, filepath] = uigetfile('*.txt', 'Pilih File RLE untuk Dekompresi');
if isequal(filename, 0) || isequal(filepath, 0)
    errordlg('Anda belum memilih file!', 'Error');
    return;
end
fullpath = fullfile(filepath, filename);

% Baca file teks yang dipilih
fileID = fopen(fullpath, 'r');
if fileID == -1
    errordlg('Tidak dapat membuka file yang dipilih!', 'Error');
    return;
end

% Tentukan dimensi gambar asli
r = 256; % Baris gambar asli
c = 256; % Kolom gambar asli

% Inisialisasi matriks untuk hasil dekompresi
Decompressed = zeros(r, c, 3, 'uint8');

% Dekompresi setiap saluran warna
for channel = 1:3
    % Baca satu baris data RLE untuk saluran saat ini
    rle = fscanf(fileID, '%d', [1, Inf]);
    
    % Dekompresi RLE untuk saluran
    channel_data = zeros(r, c);
    index = 1;
    kali = 0;
    
    for x = 1:r
    for y = 1:c
        % Pastikan indeks tidak melebihi panjang array RLE
        if index + 1 > length(rle)
            errordlg('Data RLE tidak lengkap atau dimensi gambar salah!', 'Error');
            return;
        end

        kali = kali + 1;
        if kali == rle(index + 1)
            Decompressed(x, y) = rle(index); % Simpan nilai piksel
            index = index + 2; % Pindah ke pasangan berikutnya
            kali = 0; % Reset penghitung
        else
            Decompressed(x, y) = rle(index); % Nilai piksel tetap
        end
    end
end
    
    % Masukkan hasil dekompresi saluran ke matriks hasil
    Decompressed(:, :, channel) = uint8(channel_data);
end

fclose(fileID);

% Tampilkan hasil dekompresi di axes2
set(open.figure1, 'CurrentAxes', open.axes2);
imshow(Decompressed); % Tampilkan gambar warna
title(['Hasil Dekompresi: ', filename]);
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
